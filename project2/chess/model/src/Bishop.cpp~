//Bishop.cpp

#include "Bishop.h"
#include "UnitTest.h"
using namespace std;

Bishop::Bishop(Color c, Direction d) : IChessPiece(BISHOP, c, d){
}

Bishop::~Bishop() {
}

set<BoardPosition> Bishop::getCandidateMoves(ChessBoard* board, BoardPosition pos) {
	set<BoardPosition> candidateMovesSet;
	
	//up-right
	BoardPosition origPos(pos);
	while (origPos.moveUpRight()) {
		if (board->getPiece(origPos) != NULL) {					//if current square has a piece
			if (!board->getPiece(origPos)->isEnemy(getColor()))	//if current piece is friendly, do
				break;											//  not add current position to set
			candidateMovesSet.insert(BoardPosition(origPos));	//else current piece is enemy, so 
			break;												//  add current position to set
		}
		candidateMovesSet.insert(BoardPosition(origPos));		//else we're on an empty square,
	}															//  add this pos to set and keep
																//  going in while loop
	//down-right
	origPos = pos;
	while (origPos.moveDownRight()) {
		if (board->getPiece(origPos) != NULL) {
			if (!board->getPiece(origPos)->isEnemy(getColor()))
				break;
			candidateMovesSet.insert(BoardPosition(origPos));
			break;
		}
		candidateMovesSet.insert(BoardPosition(origPos));
	}
	
	//down-left	
	origPos = pos;
	while (origPos.moveDownLeft()) {
		if (board->getPiece(origPos) != NULL) {
			if (!board->getPiece(origPos)->isEnemy(getColor()))
				break;
			candidateMovesSet.insert(BoardPosition(origPos));
			break;
		}
		candidateMovesSet.insert(BoardPosition(origPos));
	}
	
	//up-left
	origPos = pos;
	while (origPos.moveUpLeft()) {
		if (board->getPiece(origPos) != NULL) {
			if (!board->getPiece(origPos)->isEnemy(getColor()))
				break;
			candidateMovesSet.insert(BoardPosition(origPos));
			break;
		}
		candidateMovesSet.insert(BoardPosition(origPos));
	}
	
	return candidateMovesSet;
}

string Bishop::getTypeString() {
	return "bishop";
}

ImageName Bishop::getImageName() {
	if (getColor() == WHITE)
		return W_BISHOP;
	else
		return B_BISHOP;
}

void Bishop::firstTurnDone() {
	return;
}

void Bishop::firstTurnUnDone() {
	return;
}

string Bishop::getXMLInfo(int row, int column) {
	stringstream stream;
	stream << "<piece ";
	stream << "type=\"" << getTypeString() << "\" ";
	stream << "color=\"" << getColorString() << "\" ";
	stream << "column=\"" << column << "\" ";
	stream << "row=\"" << row << "\"/>\n";
	
	return stream.str();
}

bool Bishop::Test(ostream& os) {
	bool success = true;
	
	/*
	 * TEST 1 white bishop in starting location of full initial board
	 */
	Bishop b1(WHITE, UP);
	ChessBoard board1;
	board1.initializeBoard();
	
	set<BoardPosition> bpSet = b1.getCandidateMoves(&board1, BoardPosition(7,2));
	
	TEST(bpSet.find(BoardPosition(6,2)) == bpSet.end());
	TEST(bpSet.size() == 0);		//should have no moves from a newgame board
	TEST(b1.getTypeString() == "bishop");
	TEST(b1.getImageName() == W_BISHOP);
	
	/*
	 * TEST 2 black bishop in middle of an empty board (3, 3)
	 */
	IChessPiece* b2 = new Bishop(BLACK, DOWN);
	ChessBoard board2;
	board2.initializeBlankTestBoard(b2, 3, 3);
	
	set<BoardPosition> bpSet2 = b2->getCandidateMoves(&board2, BoardPosition(3,3));
	
	TEST(bpSet2.find(BoardPosition(2,2)) != bpSet2.end());	//board positions that the bishop
	TEST(bpSet2.find(BoardPosition(0,0)) != bpSet2.end());	// should be able to move to
	TEST(bpSet2.find(BoardPosition(7,7)) != bpSet2.end());	//diagonally
	TEST(bpSet2.find(BoardPosition(2,4)) != bpSet2.end());	
	TEST(bpSet2.find(BoardPosition(5,1)) != bpSet2.end());
	TEST(bpSet2.find(BoardPosition(4,4)) != bpSet2.end());
	TEST(bpSet2.find(BoardPosition(6,0)) != bpSet2.end());
	TEST(bpSet2.find(BoardPosition(3,2)) == bpSet2.end());	//board positions that the bishop
	TEST(bpSet2.find(BoardPosition(0,3)) == bpSet2.end());	// should NOT be able to move to
	TEST(bpSet2.find(BoardPosition(4,3)) == bpSet2.end());
	TEST(bpSet2.size() == 13);
	TEST(b2->getTypeString() == "bishop");
	TEST(b2->getImageName() == B_BISHOP);
	
	/*
	 * TEST 3 white bishop near bottom left edge of empty board (6, 0)
	 */
	IChessPiece* b3 = new Bishop(WHITE, UP);
	ChessBoard board3;
	board3.initializeBlankTestBoard(b3, 6, 0);
	
	set<BoardPosition> bpSet3 = q3->getCandidateMoves(&board3, BoardPosition(6, 0));
	
	TEST(bpSet3.find(BoardPosition(7, 1)) != bpSet3.end());
	TEST(bpSet3.find(BoardPosition(4, 2)) != bpSet3.end());
	TEST(bpSet3.find(BoardPosition(0, 6)) != bpSet3.end());
	TEST(bpSet3.find(BoardPosition(5, 0)) == bpSet3.end());
	TEST(bpSet3.find(BoardPosition(6, 1)) == bpSet3.end());
	TEST(bpSet3.size() == 7);
	TEST(b3->getTypeString() == "bishop");
	TEST(b3->getImageName() == W_BISHOP);
	
	/*
	 * TEST 4 black bishop middle of board with one other piece (4, 4)
	 */
	IChessPiece* b4 = new Bishop(BLACK, DOWN);
	ChessBoard board4;
	board4.initializeTwoTwoBoard(b4, 4, 4);
	
	set<BoardPosition> bpSet4 = b4->getCandidateMoves(&board4, BoardPosition(4, 4));
	
	TEST(bpSet4.find(BoardPosition(3, 3)) != bpSet4.end());
	TEST(bpSet4.find(BoardPosition(1, 1)) == bpSet4.end());	//can't go past where friendly
	TEST(bpSet4.find(BoardPosition(2, 2)) == bpSet4.end());	//where the friendly piece is
	TEST(bpSet4.size() == 10);
	
	return success;
}
